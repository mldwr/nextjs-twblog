{
  "version": 3,
  "sources": ["../../../data/siteMetadata.js", "../../../contentlayer.config.ts"],
  "sourcesContent": ["/** @type {import(\"pliny/config\").PlinyConfig } */\nconst siteMetadata = {\n  title: 'Next.js Starter Blog',\n  author: 'Tails Azimuth',\n  headerTitle: 'TailwindBlog',\n  description: 'A blog created with Next.js and Tailwind.css',\n  language: 'de-de',\n  theme: 'system', // system, dark or light\n  siteUrl: 'https://tailwind-nextjs-starter-blog.vercel.app',\n  siteRepo: 'https://github.com/timlrx/tailwind-nextjs-starter-blog',\n  siteLogo: '/static/images/logo.png',\n  socialBanner: '/static/images/twitter-card.png',\n  email: 'address@yoursite.com',\n  locale: 'de-DE',\n}\n\nmodule.exports = siteMetadata\n", "import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer2/source-files'\nimport { writeFileSync } from 'fs'\nimport readingTime from 'reading-time'\nimport { slug } from 'github-slugger'\nimport path from 'path'\nimport { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic'\n// Remark packages\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\nimport { remarkAlert } from 'remark-github-blockquote-alert'\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from 'pliny/mdx-plugins/index.js'\n// Rehype packages\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeKatex from 'rehype-katex'\nimport rehypeCitation from 'rehype-citation'\nimport rehypePrismPlus from 'rehype-prism-plus'\nimport rehypePresetMinify from 'rehype-preset-minify'\nimport siteMetadata from './data/siteMetadata'\nimport { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js'\n\nconst root = process.cwd()\nconst isProduction = process.env.NODE_ENV === 'production'\n\n// heroicon mini link\n\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n}\n\n/**\n * Count the occurrences of all tags across blog posts and write to json file\n */\nfunction createTagCount(allBlogs) {\n  const tagCount: Record<string, number> = {}\n  allBlogs.forEach((file) => {\n    if (file.tags && (!isProduction || file.draft !== true)) {\n      file.tags.forEach((tag) => {\n        const formattedTag = slug(tag)\n        if (formattedTag in tagCount) {\n          tagCount[formattedTag] += 1\n        } else {\n          tagCount[formattedTag] = 1\n        }\n      })\n    }\n  })\n  writeFileSync('./app/tag-data.json', JSON.stringify(tagCount))\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (\n    siteMetadata?.search?.provider === 'kbar' &&\n    siteMetadata.search.kbarConfig.searchDocumentsPath\n  ) {\n    writeFileSync(\n      `public/${path.basename(siteMetadata.search.kbarConfig.searchDocumentsPath)}`,\n      JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n    )\n    console.log('Local search index generated...')\n  }\n}\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: 'blog/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    lastmod: { type: 'date' },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n    images: { type: 'json' },\n    authors: { type: 'list', of: { type: 'string' } },\n    layout: { type: 'string' },\n    bibliography: { type: 'string' },\n    canonicalUrl: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    structuredData: {\n      type: 'json',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'BlogPosting',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.lastmod || doc.date,\n        description: doc.summary,\n        image: doc.images ? doc.images[0] : siteMetadata.socialBanner,\n        url: `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`,\n      }),\n    },\n  },\n}))\n\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Blog, Authors],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      remarkMath,\n      remarkImgToJsx,\n      remarkAlert,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeKatex,\n      [rehypeCitation, { path: path.join(root, 'data') }],\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\n      rehypePresetMinify,\n    ],\n  },\n  onSuccess: async (importData) => {\n    const { allBlogs } = await importData()\n    createTagCount(allBlogs)\n    createSearchIndex(allBlogs)\n  },\n})\n"],
  "mappings": "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",
  "names": ["siteMetadata", "siteMetadata"]
}
